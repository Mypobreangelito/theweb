---
/** Props
 * images:   string[]   // p.ej. "Images/IMG_4870.jpg"
 * captions?: string[]  // opcional, mismo orden
 * interval?: number    // ms (default 15000)
 * ratio?: string       // "16 / 9", "4 / 3", etc. (default "16 / 9")
 */
const { images = [], captions = [], interval = 15, ratio = "16 / 9" } = Astro.props;

// Prefijo ABSOLUTO: garantiza / al final y usa 'site' de astro.config
const absPrefix = new URL(
  import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/',
  Astro.site
).toString();

// URLs ABSOLUTAS ya resueltas en el servidor (sin lógica en el cliente)
const slides = images.map((p, i) => ({
  src: p.startsWith('http') ? p : absPrefix + p.replace(/^\/+/, ''),
  cap: captions[i] ?? ''
}));

const uid = `ss-${Math.random().toString(36).slice(2)}`;
---
<div id={uid} class="not-prose w-full max-w-4xl mx-auto">
  <!-- Marco con proporción fija; barras para que la foto quepa completa -->
  <div class="relative overflow-hidden rounded-2xl shadow-soft bg-black" style={`aspect-ratio:${ratio};`}>
    {slides.map((s, i) => (
      <img
        src={s.src}
        alt={s.cap}
        data-idx={i}
        class={`absolute inset-0 w-full h-full object-contain object-center ${i === 0 ? '' : 'hidden'}`}
        loading={i === 0 ? 'eager' : 'lazy'}
        decoding="async"
      />
    ))}

    <!-- Controles SIEMPRE clicables -->
    <button
      data-role="prev"
      type="button"
      class="absolute z-10 left-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-3 py-1 bg-black/30 rounded"
      aria-label="Anterior">‹</button>
    <button
      data-role="next"
      type="button"
      class="absolute z-10 right-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-3 py-1 bg-black/30 rounded"
      aria-label="Siguiente">›</button>
  </div>

  <!-- Caption -->
  <p data-role="cap" class="text-center text-sm text-slate-600 mt-2 min-h-[1.25rem]">{slides[0]?.cap || ''}</p>

  <script is:inline>
    (function(){
      const root = document.getElementById({JSON.stringify(uid)});
      if (!root) return;

      const imgs = Array.from(root.querySelectorAll('img[data-idx]'));
      const cap  = root.querySelector('[data-role="cap"]');
      const prev = root.querySelector('[data-role="prev"]');
      const next = root.querySelector('[data-role="next"]');

      if (!imgs.length) return;

      let i = 0;
      function show(n){
        const j = (n + imgs.length) % imgs.length;
        imgs[i].classList.add('hidden');
        imgs[j].classList.remove('hidden');
        i = j;
        if (cap) cap.textContent = imgs[i].alt || '';
      }

      // Auto-avance simple y fiable
      if (imgs.length > 1) {
        setInterval(() => show(i + 1), {JSON.stringify(interval)});
      }

      // Controles
      prev.addEventListener('click', () => show(i - 1));
      next.addEventListener('click', () => show(i + 1));

      // Teclado (con foco en el slider)
      root.tabIndex = 0;
      root.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft')  show(i - 1);
        if (e.key === 'ArrowRight') show(i + 1);
      });

      // Si una imagen falla, saltar a la siguiente
      imgs.forEach(img => img.addEventListener('error', () => show(i + 1)));
    })();
  </script>
</div>
