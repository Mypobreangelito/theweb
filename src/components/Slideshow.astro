---
/** Props
 *  images:   string[]   // rutas bajo /public, ej. "Images/IMG_4870.jpg"
 *  captions?: string[]  // opcional, mismo orden que images
 *  interval?: number    // ms (default 15000)
 *  ratio?: string       // CSS aspect-ratio, ej. "16 / 9", "4 / 3", "3 / 2"
 */
const { images = [], captions = [], interval = 15000, ratio = "16 / 9" } = Astro.props;

const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
const srcs = images.map(p => p.startsWith('http') ? p : `${base}${p}`);
const caps = captions;
const uid  = `ss-${Math.random().toString(36).slice(2)}`;

const initialSrc = srcs[0] || "";
const initialCap = caps[0] || "";
---
<div id={uid} class="not-prose relative w-full max-w-4xl mx-auto">
  <!-- Contenedor con proporción fija; las barras usan bg-black (cámbialo si quieres) -->
  <div class="relative overflow-hidden rounded-2xl shadow-soft bg-black" style={`aspect-ratio:${ratio};`}>
    <!-- Imagen centrada y SIN recorte -->
    <img
      data-role="img"
      src={initialSrc}
      alt={initialCap}
      class="absolute inset-0 w-full h-full object-contain object-center"
      loading="eager"
      decoding="async"
    />

    <!-- Controles -->
    <button
      data-role="prev"
      class="absolute left-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-2"
      aria-label="Anterior">‹</button>
    <button
      data-role="next"
      class="absolute right-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-2"
      aria-label="Siguiente">›</button>
  </div>

  <!-- Caption -->
  <p data-role="cap" class="text-center text-sm text-slate-600 mt-2 min-h-[1.25rem]">{initialCap}</p>

  <script is:inline>
    (function(){
      const root = document.getElementById({JSON.stringify(uid)});
      if (!root) return;

      const img  = root.querySelector('[data-role="img"]');
      const cap  = root.querySelector('[data-role="cap"]');
      const prev = root.querySelector('[data-role="prev"]');
      const next = root.querySelector('[data-role="next"]');

      const sources  = {JSON.stringify(srcs)};
      const captions = {JSON.stringify(caps)};
      if (!sources.length) return;

      let i = 0, timer = null;

      function set(j){
        i = (j + sources.length) % sources.length;
        img.src = sources[i];
        img.alt = captions[i] || '';
        cap.textContent = captions[i] || '';
      }
      function start(){ if (!timer) timer = setInterval(() => set(i+1), {JSON.stringify(interval)}); }
      function stop(){ if (timer) { clearInterval(timer); timer = null; } }

      // auto-avanza (no se pausa al pasar el mouse)
      start();

      // botones
      prev.addEventListener('click', () => { set(i-1); stop(); start(); });
      next.addEventListener('click', () => { set(i+1); stop(); start(); });

      // pausa sólo si el slider tiene foco con teclado
      root.tabIndex = 0;
      root.addEventListener('focusin', stop);
      root.addEventListener('focusout', start);
      root.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft')  { set(i-1); stop(); start(); }
        if (e.key === 'ArrowRight') { set(i+1); stop(); start(); }
      });
    })();
  </script>
</div>

