---
/** Props
 *  images:   string[]   // rutas bajo /public (ej. "Images/IMG_4870.jpg")
 *  captions?: string[]  // opcional, mismo orden que images
 *  interval?: number    // ms (default 15000)
 *  ratio?: string       // CSS aspect-ratio, ej. "16 / 9", "4 / 3", "3 / 2"
 */
const { images = [], captions = [], interval = 15000, ratio = "16 / 9" } = Astro.props;

const base = import.meta.env.BASE_URL.endsWith('/') ? import.meta.env.BASE_URL : import.meta.env.BASE_URL + '/';
const srcs = images.map(p => p.startsWith('http') ? p : `${base}${p}`);
const caps = captions;
const uid  = `ss-${Math.random().toString(36).slice(2)}`;

const initialSrc = srcs[0] || "";
const initialCap = caps[0] || "";
---
<div id={uid} class="not-prose relative w-full max-w-4xl mx-auto">
  <!-- Proporción fija; usa bg-black como “barras” para mantener la foto completa -->
  <div class="relative overflow-hidden rounded-2xl shadow-soft bg-black" style={`aspect-ratio:${ratio};`}>
    <!-- Foto CENTRADA y SIN recorte -->
    <img
      data-role="img"
      src={initialSrc}
      alt={initialCap}
      class="absolute inset-0 w-full h-full object-contain object-center"
      loading="eager"
      decoding="async"
    />

    <!-- Controles -->
    <button data-role="prev"
      class="absolute left-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-2"
      aria-label="Anterior">‹</button>
    <button data-role="next"
      class="absolute right-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-2"
      aria-label="Siguiente">›</button>
  </div>

  <!-- Caption -->
  <p data-role="cap" class="text-center text-sm text-slate-600 mt-2 min-h-[1.25rem]">{initialCap}</p>

  <script is:inline>
    (function(){
      const root = document.getElementById({JSON.stringify(uid)});
      if (!root) return;

      const img  = root.querySelector('[data-role="img"]');
      const cap  = root.querySelector('[data-role="cap"]');
      const prev = root.querySelector('[data-role="prev"]');
      const next = root.querySelector('[data-role="next"]');

      const sources  = {JSON.stringify(srcs)};
      const captions = {JSON.stringify(caps)};
      if (!sources.length) return;

      let i = 0;           // índice actual
      let timer = null;    // id del timeout

      function show(j){
        i = (j + sources.length) % sources.length;
        // Cambia imagen + caption
        img.src = sources[i];
        img.alt = captions[i] || '';
        cap.textContent = captions[i] || '';
      }

      function schedule(ms){
        if (timer) clearTimeout(timer);
        timer = setTimeout(() => advance(1), ms);
      }

      function advance(delta){
        show(i + delta);
        schedule({JSON.stringify(interval)});
      }

      // Si la imagen falla, avanza pronto a la siguiente
      img.addEventListener('error', () => {
        schedule(800); // intenta siguiente en 0.8s
      });
      // Cuando carga, asegura que el ciclo siga (útil la primera vez)
      img.addEventListener('load', () => {
        // no reprogramamos aquí para evitar doble temporizador:
        // el ciclo lo gestiona schedule() tras cada advance()
      });

      // Controles
      prev.addEventListener('click', () => advance(-1));
      next.addEventListener('click', () => advance(1));

      // Teclado (si el slider tiene foco)
      root.tabIndex = 0;
      root.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft')  advance(-1);
        if (e.key === 'ArrowRight') advance(1);
      });

      // Inicia ciclo después de la primera pintura
      schedule({JSON.stringify(interval)});
    })();
  </script>
</div>

