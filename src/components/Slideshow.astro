---
/** Props
 *  images:   string[]   // ej. "Images/IMG_4870.jpg"
 *  captions?: string[]  // opcional
 *  interval?: number    // ms (default 15000)
 *  ratio?: string       // "16 / 9", "4 / 3", etc.
 */
const { images = [], captions = [], interval = 15000, ratio = "16 / 9" } = Astro.props;

// Prefijo ABSOLUTO: https://<usuario>.github.io/theweb/
const prefix = new URL(import.meta.env.BASE_URL, Astro.site).toString();
const srcs = images.map(p => p.startsWith("http") ? p : prefix + p);
const caps = captions;

// ID y clave únicos (para registrar funciones globales seguras)
const uid  = `ss_${Math.random().toString(36).slice(2)}`;
const key  = `${uid}_ctl`;

const firstSrc = srcs[0] ?? "";
const firstCap = caps[0] ?? "";
---
<div id={uid} class="not-prose w-full max-w-4xl mx-auto">
  <div class="relative overflow-hidden rounded-2xl shadow-soft bg-black" style={`aspect-ratio:${ratio};`}>
    <img
      data-role="img"
      src={firstSrc}
      alt={firstCap}
      class="absolute inset-0 w-full h-full object-contain object-center"
      loading="eager"
      decoding="async"
    />
    <!-- Botones con z-index alto + onClick directo (fallback) -->
    <button
      data-role="prev"
      type="button"
      class="absolute z-10 left-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-3 py-1 bg-black/30 rounded"
      aria-label="Anterior"
      onclick={`window['${key}'] && window['${key}'].prev && window['${key}'].prev()`}
    >‹</button>
    <button
      data-role="next"
      type="button"
      class="absolute z-10 right-2 top-1/2 -translate-y-1/2 text-white/90 text-3xl px-3 py-1 bg-black/30 rounded"
      aria-label="Siguiente"
      onclick={`window['${key}'] && window['${key}'].next && window['${key}'].next()`}
    >›</button>
  </div>
  <p data-role="cap" class="text-center text-sm text-slate-600 mt-2 min-h-[1.25rem]">{firstCap}</p>

  <script is:inline>
    (function(){
      const root = document.getElementById({JSON.stringify(uid)});
      if (!root) return;

      const img  = root.querySelector('[data-role="img"]');
      const cap  = root.querySelector('[data-role="cap"]');
      const prev = root.querySelector('[data-role="prev"]');
      const next = root.querySelector('[data-role="next"]');

      const sources  = {JSON.stringify(srcs)};
      const captions = {JSON.stringify(caps)};
      const intervalMs = {JSON.stringify(interval)};
      if (!sources.length) return;

      let i = 0;

      function render(index){
        i = (index + sources.length) % sources.length;
        img.src = sources[i];
        img.alt = captions[i] || '';
        if (cap) cap.textContent = captions[i] || '';
      }

      // Registrar controladores globales (para los onclick)
      window[{JSON.stringify(key)}] = {
        prev: () => render(i - 1),
        next: () => render(i + 1),
      };

      // Listeners (si fallaran, los onclick ya cubren)
      prev.addEventListener('click', () => render(i - 1));
      next.addEventListener('click', () => render(i + 1));

      // Auto-avance simple
      if (sources.length > 1) {
        setInterval(() => render(i + 1), intervalMs);
      }

      // Teclado (si el slider tiene foco)
      root.tabIndex = 0;
      root.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft')  render(i - 1);
        if (e.key === 'ArrowRight') render(i + 1);
      });

      // Si una imagen falla, saltar a la siguiente
      img.addEventListener('error', () => render(i + 1));
    })();
  </script>
</div>
